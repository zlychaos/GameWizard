//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 15 "GameWizard.y"
  import java.io.*;
  import java.util.*;
  import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short GAME_DF=257;
public final static short CARD_DF=258;
public final static short CHARACTER_DF=259;
public final static short GAME_NM=260;
public final static short PLAYER_C=261;
public final static short PLAYER=262;
public final static short SKILL=263;
public final static short DEALER=264;
public final static short METHOD=265;
public final static short MAX_ROUND=266;
public final static short IF=267;
public final static short ELSE=268;
public final static short WHILE=269;
public final static short TRUE=270;
public final static short FALSE=271;
public final static short OP_EQ=272;
public final static short OP_LE=273;
public final static short OP_GE=274;
public final static short OP_NE=275;
public final static short OP_LOR=276;
public final static short OP_LAND=277;
public final static short INIT=278;
public final static short ROUND_END=279;
public final static short ROUND_BEGIN=280;
public final static short ROUND=281;
public final static short TURN=282;
public final static short DYING=283;
public final static short DECLR_INT=284;
public final static short DECLR_STR=285;
public final static short DECLR_BOOL=286;
public final static short VOID=287;
public final static short INTEGER=288;
public final static short STRING=289;
public final static short ID=290;
public final static short ROUND_end=291;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,   47,   49,   49,   50,   50,   48,   51,
   51,   52,    3,    3,    3,   38,   38,   39,   39,   40,
   40,   41,   41,   42,   43,   43,   45,   45,   44,   44,
   46,   46,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,   37,    7,    6,    6,   24,   26,   25,   25,
   27,   36,   36,   35,   35,   34,   34,   33,   33,   32,
   32,   28,   31,   31,   29,   29,   30,   23,   23,   23,
   18,   18,   16,   16,   19,   19,   20,   20,   20,   20,
   20,   20,   22,   21,   21,    8,   15,   15,   17,   17,
   13,   13,   13,   13,   14,   14,   14,   12,   12,   12,
   12,   12,   11,   11,   11,   10,   10,    9,    9,    5,
    5,
};
final static short yylen[] = {                            2,
    6,    4,   12,    4,    2,    1,   12,   12,    4,    2,
    1,    5,    5,    5,    0,    5,    5,    2,    1,   11,
   11,    4,    4,    6,    4,    4,    4,    4,    4,    4,
    4,    4,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    5,    5,    7,    1,    2,    1,    1,
    2,    1,    3,    1,    3,    1,    4,    1,    3,    1,
    3,    1,    3,    2,    1,    4,    1,    1,    1,    1,
    1,    3,    1,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    3,    4,    4,    1,    1,    2,    1,    1,
    1,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    1,    3,    1,
    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    4,    5,    0,    0,   11,    0,    0,    0,    0,
    0,    0,    0,    9,   10,    0,    0,   79,   80,   69,
   70,   68,    0,   77,   78,   71,    0,   43,    0,   89,
   90,    0,   41,   33,   37,    0,    0,    0,    0,    0,
    0,    0,   86,   87,    0,    0,    0,   76,   81,   82,
   67,   35,    0,   47,   49,   50,    0,    0,   62,   39,
    0,    0,    1,    0,    0,    0,    0,    0,    0,   23,
   64,    0,    0,   22,   42,   34,   38,   36,   40,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   88,    0,    0,    0,    0,   48,   56,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,   75,  111,   91,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
    0,    0,    0,   72,    0,   83,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   12,    0,    0,   84,   85,    0,    0,   58,   55,   53,
   66,    0,    0,    0,    0,    0,   32,   31,    0,   13,
   14,    0,    0,    0,   44,   57,    0,   60,   26,   25,
    0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
    0,   59,    0,   28,   27,    0,    0,    0,    0,   17,
    0,   16,   18,   46,   61,   30,   29,    0,    0,    0,
    0,    3,    0,    0,    0,    8,    7,    0,    0,    0,
    0,    0,    0,    0,    0,   21,   20,
};
final static short yydgoto[] = {                          2,
    3,    8,   32,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
   79,  197,  179,  121,  122,  123,   80,  133,  209,  210,
   19,   29,  126,  186,  163,   83,    6,   11,   15,   16,
   25,   26,
};
final static short yysindex[] = {                      -232,
  -85,    0, -202, -191,  -18, -184,   18,  -39, -205,   -4,
 -190, -200,    0,  -32,    5, -205, -183,  -23, -172,   52,
 -177,    0,    0,   -9,  -92,    0,  905,   -8, -167, -144,
   60, -143, -177,    0,    0,   84,   91,    0,    0,    0,
    0,    0,    8,    0,    0,    0,  937,    0,   86,    0,
    0,  945,    0,    0,    0,   71, -142, -139, -242,  -57,
   -6,    7,    0,    0,   86,  -40,  -26,    0,    0,    0,
    0,    0,   76,    0,    0,    0, -148,   53,    0,    0,
 -137,   22,    0,   92, -230,  109, -111,   86,   86,    0,
    0,  982,  112,    0,    0,    0,    0,    0,    0,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,    0,   86, -133,   86, -131,    0,    0,
  -43,    0,  117, -124,   42, -116,  993, -121,  111,  113,
  -91,  115,   49,  136,  141,    0,    0,    0,    0, -139,
 -242,  -57,  -57,    7,    7,    7,    7,    0,    0,    0,
   -6,   -6,   90,    0,   97,    0, -103,   70, -148,  107,
 1039,   69,  -90,   77, 1114,  146, -177, -177,  -58,  116,
    0,   85,   85,    0,    0,  120,   70,    0,    0,    0,
    0,   95, 1165, 1177,  100,  102,    0,    0,  -51,    0,
    0,  168, -250,  -44,    0,    0,  -42,    0,    0,    0,
  106, 1210, 1252,    0,  167,  122,  142,  124,  155,  -36,
   85,    0,   70,    0,    0,  125, 1282,  -22, 1307,    0,
  -16,    0,    0,    0,    0,    0,    0,  203,  140, 1315,
  227,    0,  143,  145,   19,    0,    0,   20,  239,  160,
 1347,  164, 1378,  169,  172,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  192,    0,    0,    0,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,  486,  842,  769,  511,
   61,  170,    0,    0,    0,  -33,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -25,    0,  243,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  867,
  811,  549,  643,  355,  424,  449,  474,    0,    0,    0,
   96,  135,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -208, -208,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1386,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  -20,  -15, 1589,   16,   99, 1608,    0,  204,
  213,  -37,  -41,  -84,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  341,    0,    0,    0,    0,    0,    0,
 -157,    0, -160,    0,  158,    0,  418,    0,  108,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  303,    0,
    0,  295,
};
final static int YYTABLESIZE=1832;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         73,
   34,  213,  107,   73,  108,  116,   73,   73,   73,   73,
   73,   73,   87,   73,  194,  195,  198,  158,   54,  118,
  144,  145,  146,  147,    1,   73,   73,   73,   73,  103,
  111,   92,  104,   54,   74,  109,  207,    4,   74,  208,
  110,   74,   74,   74,   74,   74,   74,  157,   74,  113,
  115,  112,  225,  224,   15,    5,   15,  129,  130,   73,
   74,   74,   74,   74,  117,  142,  143,   96,    7,   91,
  151,  152,    9,   91,   10,   12,   91,   91,   91,   91,
   91,   91,  212,   91,   14,   13,   17,   18,   20,   73,
   21,   73,   73,   95,   74,   91,   91,   22,   91,   27,
   95,   95,   51,   95,   95,   95,   24,   96,   28,   49,
   30,  165,   31,   33,   81,   82,   84,   85,   51,   95,
   95,   86,   95,   88,   74,   49,   74,   74,   97,   91,
   89,  100,   90,  101,  119,   97,   97,  102,   97,   97,
   97,  120,  125,  124,  127,  183,  190,  191,  131,  128,
   97,  132,  137,   95,   97,   97,  154,   97,  156,   91,
  159,   91,   91,  160,  161,  162,  166,   96,  202,  167,
  169,  168,  170,  171,   96,   96,  172,   96,   96,   96,
   96,  173,  174,   95,  176,   95,   95,  217,   97,  175,
   97,  184,  177,   96,   96,   50,   96,   24,   96,  181,
  185,  187,   98,  230,  189,  192,  193,   47,  206,   98,
   98,   50,  196,   98,  205,  105,  106,   96,   97,  199,
   97,   97,  203,  211,  218,  243,  204,   96,   98,   98,
  214,   98,   96,   73,  220,   73,   73,   73,   73,   73,
   73,   73,   73,   73,  219,   96,  221,  222,  231,  226,
   73,   73,   73,  208,   73,   73,   73,   96,   96,   96,
   96,  232,   98,   97,  233,  228,  235,  236,   74,  237,
   74,   74,   74,   74,   74,   74,   74,   74,   74,  240,
  238,   97,  241,  239,    6,   74,   74,   74,  244,   74,
   74,   74,   98,  246,   98,   98,  247,   15,   15,   65,
   97,   51,   19,   91,  140,   91,   91,   91,   91,   91,
   91,   91,   91,   91,  141,   97,  180,  223,   23,   35,
   91,   91,   91,    0,   91,   91,   91,   95,   97,   95,
   95,   95,   95,   95,   95,   95,   95,   95,    0,   38,
   39,   97,    0,    0,   95,   95,   95,    0,   95,   95,
   95,    0,    0,    0,    0,   38,   39,   44,   45,   46,
    0,    0,   97,    0,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   44,   45,   46,    0,    0,    0,   97,
   97,   97,    0,   97,   97,   97,    0,  101,    0,    0,
    0,    0,   98,    0,  101,  101,    0,    0,  101,    0,
    0,   96,    0,   96,   96,   96,   96,   96,   96,   96,
   96,   96,    0,  101,  101,    0,  101,    0,   96,   96,
   96,    0,   96,   96,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,   98,    0,   98,   98,
   98,   98,   98,   98,   98,   98,   98,  101,    0,    0,
    0,    0,    0,   98,   98,   98,  102,   98,   98,   98,
    0,    0,    0,  102,  102,    0,    0,  102,    0,   99,
    0,    0,    0,    0,    0,    0,    0,  101,    0,  101,
  101,   99,  102,  102,    0,  102,    0,    0,   99,   99,
    0,    0,   99,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   98,  100,   99,   99,   99,
   99,    0,    0,  100,  100,    0,  102,  100,  110,    0,
    0,    0,    0,   98,    0,  110,  110,    0,    0,  110,
    0,    0,  100,  100,    0,  100,    0,    0,    0,    0,
    0,   99,   98,  103,  110,    0,  102,    0,  102,  102,
  103,  103,    0,    0,  103,    0,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,  100,    0,    0,  103,
   98,   99,    0,   99,   99,    0,    0,    0,  110,    0,
    0,  104,   99,   98,    0,    0,    0,    0,  104,  104,
    0,    0,  104,    0,    0,    0,  100,    0,  100,  100,
   99,    0,    0,  103,    0,    0,    0,  104,  110,    0,
  110,  110,    0,    0,    0,    0,    0,    0,    0,   99,
    0,  101,    0,  101,  101,  101,  101,  101,  101,  101,
  101,  101,    0,  103,   99,  103,  103,    0,  101,  101,
  101,  104,  101,  101,  101,    0,    0,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,    0,  104,  104,  105,    0,    0,    0,    0,
    0,    0,  105,  105,    0,    0,  105,    0,    0,    0,
  102,    0,  102,  102,  102,  102,  102,  102,  102,  102,
  102,  105,    0,    0,    0,    0,    0,  102,  102,  102,
    0,  102,  102,  102,    0,   99,    0,   99,   99,   99,
   99,   99,   99,   99,   99,   99,    0,    0,    0,    0,
    0,    0,   99,   99,   99,  105,   99,   99,   99,    0,
  100,    0,  100,  100,  100,  100,  100,  100,  100,  100,
  100,    0,  110,    0,  110,  110,  110,  100,  100,  100,
    0,  100,  100,  100,    0,  105,    0,  105,  105,  110,
  110,  110,    0,  110,  110,  110,    0,  103,    0,  103,
  103,  103,  103,    0,    0,  103,  103,  103,    0,    0,
    0,    0,    0,    0,  103,  103,  103,    0,  103,  103,
  103,  106,    0,    0,    0,    0,    0,    0,  106,  106,
    0,    0,  106,    0,    0,  104,    0,  104,  104,  104,
  104,    0,    0,  104,  104,  104,    0,  106,    0,    0,
    0,    0,  104,  104,  104,    0,  104,  104,  104,    0,
    0,    0,    0,  107,    0,    0,    0,    0,    0,    0,
  107,  107,    0,    0,  107,    0,    0,    0,    0,    0,
    0,  106,    0,    0,    0,    0,    0,    0,    0,  107,
    0,    0,    0,    0,  108,    0,    0,    0,    0,    0,
    0,  108,  108,    0,    0,  108,    0,    0,    0,    0,
    0,  106,    0,  106,  106,    0,    0,    0,    0,  109,
  108,    0,    0,  107,    0,    0,  109,  109,    0,  105,
  109,  105,  105,  105,  105,    0,    0,  105,  105,  105,
    0,    0,    0,    0,    0,  109,  105,  105,  105,    0,
  105,  105,  105,  107,  108,  107,  107,   51,    0,    0,
    0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,   48,  108,    0,  108,  108,    0,   51,
    0,    0,    0,    0,    0,    0,   49,   51,    0,    0,
    0,    0,    0,    0,   49,    0,    0,    0,    0,  109,
    0,  109,  109,    0,    0,   48,    0,    0,    0,    0,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
    0,   49,    0,    0,    0,   51,    0,   47,    0,    0,
   50,    0,   49,    0,    0,  106,    0,  106,  106,  106,
   48,    0,    0,    0,  106,  106,    0,    0,    0,    0,
    0,   48,  106,  106,  106,    0,  106,  106,  106,   47,
    0,   91,   50,    0,    0,    0,    0,   47,    0,   94,
   50,   51,    0,    0,    0,    0,    0,  107,   49,  107,
  107,  107,    0,    0,    0,    0,  107,  107,    0,    0,
    0,    0,    0,    0,  107,  107,  107,   48,  107,  107,
  107,    0,    0,    0,   47,    0,  136,   50,  108,    0,
  108,  108,  108,    0,    0,   47,    0,  108,   50,    0,
    0,    0,    0,    0,    0,  108,  108,  108,    0,  108,
  108,  108,    0,  109,    0,  109,  109,  109,    0,    0,
    0,    0,  109,    0,    0,    0,   51,    0,    0,    0,
  109,  109,  109,   49,  109,  109,  109,    0,    0,    0,
    0,   47,    0,    0,   50,    0,    0,    0,    0,    0,
    0,   36,   48,   37,   38,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,   41,
   42,   43,   44,   45,   46,    0,    0,   51,    0,    0,
    0,    0,    0,   36,   49,   37,   38,   39,    0,   51,
    0,   36,    0,   37,   38,   39,   49,    0,    0,    0,
   40,   41,   42,   48,   44,   45,   46,    0,   40,   41,
   42,    0,   44,   45,   46,   48,   47,    0,  188,   50,
    0,    0,   51,    0,    0,    0,    0,    0,   36,   49,
   37,   38,   39,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   38,   39,    0,   40,   41,   42,   48,   44,
   45,   46,    0,    0,    0,    0,   40,   41,   42,  164,
   44,   45,   46,    0,   51,    0,    0,   47,    0,  200,
   50,   49,    0,    0,    0,    0,    0,    0,    0,   47,
    0,    0,   50,    0,    0,   36,    0,   37,   38,   39,
   48,    0,    0,    0,   51,    0,    0,    0,    0,    0,
    0,   49,   40,   41,   42,  182,   44,   45,   46,    0,
    0,    0,   47,    0,  215,   50,    0,    0,    0,   51,
   48,    0,    0,    0,    0,    0,   49,   51,    0,    0,
    0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,    0,    0,    0,    0,
    0,    0,    0,   48,   47,    0,    0,   50,    0,   51,
   36,    0,   37,   38,   39,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,   41,   42,
    0,   44,   45,   46,   47,   48,  227,   50,    0,    0,
   51,    0,    0,    0,    0,    0,    0,   49,   45,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,   47,
    0,   36,   50,   37,   38,   39,   48,   47,    0,  234,
   50,    0,    0,   36,   45,   37,   38,   39,   40,   41,
   42,    0,   44,   45,   46,    0,    0,    0,    0,    0,
   40,   41,   42,  201,   44,   45,   46,    0,    0,   47,
    0,    0,   50,    0,    0,    0,   36,    0,   37,   38,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   40,   41,   42,    0,   44,   45,   46,
   47,    0,  245,   50,    0,    0,    0,    0,   45,    0,
   45,   45,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   38,   39,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,   41,   42,  216,   44,
   45,   46,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   38,   39,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,   41,   42,    0,   44,
   45,   46,    0,   36,    0,   37,   38,   39,    0,    0,
    0,   36,    0,   37,   38,   39,    0,    0,    0,    0,
   40,   41,   42,  229,   44,   45,   46,    0,   40,   41,
   42,    0,   44,   45,   46,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   38,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,   41,   42,  242,   44,   45,   46,   93,    0,    0,
   95,    0,    0,    0,   36,    0,   37,   38,   39,    0,
    0,    0,   45,    0,   45,   45,   45,    0,    0,    0,
    0,   40,   41,   42,    0,   44,   45,   46,    0,   45,
   45,   45,  114,   45,   45,   45,  134,  135,    0,    0,
   95,    0,    0,    0,    0,    0,    0,    0,  138,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,    0,  155,    0,    0,  139,  139,
  139,  139,  139,  139,  139,  139,  148,  149,  150,  139,
  139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  178,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  178,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  178,    0,    0,    0,   95,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
   93,   44,   60,   37,   62,   46,   40,   41,   42,   43,
   44,   45,   33,   47,  172,  173,  177,   61,   44,   46,
  105,  106,  107,  108,  257,   59,   60,   61,   62,  272,
   37,   47,  275,   59,   33,   42,  287,  123,   37,  290,
   47,   40,   41,   42,   43,   44,   45,   91,   47,   43,
   91,   45,  213,  211,  263,  258,  265,  288,  289,   93,
   59,   60,   61,   62,   91,  103,  104,   52,  260,   33,
  112,  113,   91,   37,  259,   58,   40,   41,   42,   43,
   44,   45,  125,   47,  290,  125,   91,  278,  289,  123,
  123,  125,  126,   33,   93,   59,   60,   93,   62,  123,
   40,   41,   33,   43,   44,   45,  290,   92,  281,   40,
   59,  127,  290,  123,  123,  283,  261,   58,   33,   59,
   60,  265,   62,   40,  123,   40,  125,  126,   33,   93,
   40,   61,  125,  276,   59,   40,   41,  277,   43,   44,
   45,  290,  280,   91,  123,  161,  167,  168,   40,   58,
   52,  263,   41,   93,   59,   60,  290,   62,  290,  123,
   44,  125,  126,  288,  123,  282,  288,   33,  184,   59,
  262,   59,   58,  125,   40,   41,   41,   43,   44,   45,
  165,   41,   93,  123,  288,  125,  126,  203,   93,   93,
   92,  123,  123,   59,   60,  126,   62,  290,  183,   93,
  291,  125,   33,  219,   59,  264,   91,  123,   41,   40,
   41,  126,   93,   44,  266,  273,  274,  202,  123,  125,
  125,  126,  123,  268,   58,  241,  125,   93,   59,   60,
  125,   62,  217,  267,   93,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  123,  230,  123,   93,  265,  125,
  284,  285,  286,  290,  288,  289,  290,  123,  243,  125,
  126,   59,   93,  165,  125,  288,   40,  125,  267,  125,
  269,  270,  271,  272,  273,  274,  275,  276,  277,   41,
  262,  183,  123,  264,   93,  284,  285,  286,  125,  288,
  289,  290,  123,  125,  125,  126,  125,  265,  263,  290,
  202,   59,   93,  267,  101,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  102,  217,  159,  210,   16,   25,
  284,  285,  286,   -1,  288,  289,  290,  267,  230,  269,
  270,  271,  272,  273,  274,  275,  276,  277,   -1,  270,
  271,  243,   -1,   -1,  284,  285,  286,   -1,  288,  289,
  290,   -1,   -1,   -1,   -1,  270,  271,  288,  289,  290,
   -1,   -1,  267,   -1,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  288,  289,  290,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,  289,  290,   -1,   33,   -1,   -1,
   -1,   -1,   52,   -1,   40,   41,   -1,   -1,   44,   -1,
   -1,  267,   -1,  269,  270,  271,  272,  273,  274,  275,
  276,  277,   -1,   59,   60,   -1,   62,   -1,  284,  285,
  286,   -1,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   92,   -1,   -1,   -1,  267,   -1,  269,  270,
  271,  272,  273,  274,  275,  276,  277,   93,   -1,   -1,
   -1,   -1,   -1,  284,  285,  286,   33,  288,  289,  290,
   -1,   -1,   -1,   40,   41,   -1,   -1,   44,   -1,   52,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   33,   59,   60,   -1,   62,   -1,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  165,   33,   59,   60,   92,
   62,   -1,   -1,   40,   41,   -1,   93,   44,   33,   -1,
   -1,   -1,   -1,  183,   -1,   40,   41,   -1,   -1,   44,
   -1,   -1,   59,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   93,  202,   33,   59,   -1,  123,   -1,  125,  126,
   40,   41,   -1,   -1,   44,   -1,   -1,  217,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   59,
  230,  123,   -1,  125,  126,   -1,   -1,   -1,   93,   -1,
   -1,   33,  165,  243,   -1,   -1,   -1,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,  123,   -1,  125,  126,
  183,   -1,   -1,   93,   -1,   -1,   -1,   59,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  202,
   -1,  267,   -1,  269,  270,  271,  272,  273,  274,  275,
  276,  277,   -1,  123,  217,  125,  126,   -1,  284,  285,
  286,   93,  288,  289,  290,   -1,   -1,  230,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  243,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
  267,   -1,  269,  270,  271,  272,  273,  274,  275,  276,
  277,   59,   -1,   -1,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,  289,  290,   -1,  267,   -1,  269,  270,  271,
  272,  273,  274,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,   -1,  284,  285,  286,   93,  288,  289,  290,   -1,
  267,   -1,  269,  270,  271,  272,  273,  274,  275,  276,
  277,   -1,  267,   -1,  269,  270,  271,  284,  285,  286,
   -1,  288,  289,  290,   -1,  123,   -1,  125,  126,  284,
  285,  286,   -1,  288,  289,  290,   -1,  267,   -1,  269,
  270,  271,  272,   -1,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,   -1,   -1,  284,  285,  286,   -1,  288,  289,
  290,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,  267,   -1,  269,  270,  271,
  272,   -1,   -1,  275,  276,  277,   -1,   59,   -1,   -1,
   -1,   -1,  284,  285,  286,   -1,  288,  289,  290,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   33,
   59,   -1,   -1,   93,   -1,   -1,   40,   41,   -1,  267,
   44,  269,  270,  271,  272,   -1,   -1,  275,  276,  277,
   -1,   -1,   -1,   -1,   -1,   59,  284,  285,  286,   -1,
  288,  289,  290,  123,   93,  125,  126,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   59,  123,   -1,  125,  126,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   -1,   33,   -1,  123,   -1,   -1,
  126,   -1,   40,   -1,   -1,  267,   -1,  269,  270,  271,
   59,   -1,   -1,   -1,  276,  277,   -1,   -1,   -1,   -1,
   -1,   59,  284,  285,  286,   -1,  288,  289,  290,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   33,   -1,   -1,   -1,   -1,   -1,  267,   40,  269,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,   -1,
   -1,   -1,   -1,   -1,  284,  285,  286,   59,  288,  289,
  290,   -1,   -1,   -1,  123,   -1,  125,  126,  267,   -1,
  269,  270,  271,   -1,   -1,  123,   -1,  276,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
  289,  290,   -1,  267,   -1,  269,  270,  271,   -1,   -1,
   -1,   -1,  276,   -1,   -1,   -1,   33,   -1,   -1,   -1,
  284,  285,  286,   40,  288,  289,  290,   -1,   -1,   -1,
   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   59,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,
  286,  287,  288,  289,  290,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   -1,  267,   40,  269,  270,  271,   -1,   33,
   -1,  267,   -1,  269,  270,  271,   40,   -1,   -1,   -1,
  284,  285,  286,   59,  288,  289,  290,   -1,  284,  285,
  286,   -1,  288,  289,  290,   59,  123,   -1,  125,  126,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,  267,   40,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  270,  271,   -1,  284,  285,  286,   59,  288,
  289,  290,   -1,   -1,   -1,   -1,  284,  285,  286,  287,
  288,  289,  290,   -1,   33,   -1,   -1,  123,   -1,  125,
  126,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,  267,   -1,  269,  270,  271,
   59,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  284,  285,  286,  287,  288,  289,  290,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   33,
   59,   -1,   -1,   -1,   -1,   -1,   40,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,  123,   -1,   -1,  126,   -1,   33,
  267,   -1,  269,  270,  271,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,  289,  290,  123,   59,  125,  126,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,   33,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,  123,
   -1,  267,  126,  269,  270,  271,   59,  123,   -1,  125,
  126,   -1,   -1,  267,   59,  269,  270,  271,  284,  285,
  286,   -1,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,
  284,  285,  286,  287,  288,  289,  290,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,  267,   -1,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,  289,  290,
  123,   -1,  125,  126,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,  287,  288,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
  289,  290,   -1,  267,   -1,  269,  270,  271,   -1,   -1,
   -1,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
  284,  285,  286,  287,  288,  289,  290,   -1,  284,  285,
  286,   -1,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,  285,  286,  287,  288,  289,  290,   49,   -1,   -1,
   52,   -1,   -1,   -1,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,  289,  290,   -1,  284,
  285,  286,   65,  288,  289,  290,   88,   89,   -1,   -1,
   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  100,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  115,   -1,  117,   -1,   -1,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
  113,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  158,   -1,   -1,   -1,
   -1,   -1,   -1,  165,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  177,   -1,   -1,   -1,   -1,
   -1,  183,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  202,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  213,   -1,   -1,   -1,  217,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  230,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  243,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=291;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"GAME_DF","CARD_DF","CHARACTER_DF",
"GAME_NM","PLAYER_C","PLAYER","SKILL","DEALER","METHOD","MAX_ROUND","IF","ELSE",
"WHILE","TRUE","FALSE","OP_EQ","OP_LE","OP_GE","OP_NE","OP_LOR","OP_LAND",
"INIT","ROUND_END","ROUND_BEGIN","ROUND","TURN","DYING","DECLR_INT","DECLR_STR",
"DECLR_BOOL","VOID","INTEGER","STRING","ID","ROUND_end",
};
final static String yyrule[] = {
"$accept : input",
"input : game_df card_df character_df init_block round_block dying_block",
"game_df : GAME_DF '{' game_df_content '}'",
"game_df_content : GAME_NM ':' STRING ';' PLAYER_C ':' INTEGER ';' MAX_ROUND ':' INTEGER ';'",
"card_df : CARD_DF '[' cards_df_content ']'",
"cards_df_content : card_df_content cards_df_content",
"cards_df_content : card_df_content",
"card_df_content : ID '{' variable_list METHOD '(' PLAYER DEALER ')' '{' STATEMENT_LIST '}' '}'",
"card_df_content : ID '{' variable_list METHOD '(' PLAYER DEALER ')' '{' VOID '}' '}'",
"character_df : CHARACTER_DF '[' characters_df_content ']'",
"characters_df_content : characters_df_content character_df_content",
"characters_df_content : character_df_content",
"character_df_content : ID '{' variable_list skill_df '}'",
"variable_list : ID ':' INTEGER ';' variable_list",
"variable_list : ID ':' STRING ';' variable_list",
"variable_list :",
"skill_df : SKILL ':' '[' skill_lists ']'",
"skill_df : SKILL ':' '[' VOID ']'",
"skill_lists : skill_list skill_lists",
"skill_lists : skill_list",
"skill_list : ID '{' METHOD '(' PLAYER DEALER ')' '{' STATEMENT_LIST '}' '}'",
"skill_list : ID '{' METHOD '(' PLAYER DEALER ')' '{' VOID '}' '}'",
"init_block : INIT '{' STATEMENT_LIST '}'",
"init_block : INIT '{' VOID '}'",
"round_block : ROUND '{' round_begin_block turn_block round_end_block '}'",
"round_begin_block : ROUND_BEGIN '{' STATEMENT_LIST '}'",
"round_begin_block : ROUND_BEGIN '{' VOID '}'",
"turn_block : TURN '{' STATEMENT_LIST '}'",
"turn_block : TURN '{' VOID '}'",
"round_end_block : ROUND_end '{' STATEMENT_LIST '}'",
"round_end_block : ROUND_end '{' VOID '}'",
"dying_block : DYING '{' STATEMENT_LIST '}'",
"dying_block : DYING '{' VOID '}'",
"STATEMENT_LIST : SelectionStatement",
"STATEMENT_LIST : STATEMENT_LIST SelectionStatement",
"STATEMENT_LIST : FieldDeclarations",
"STATEMENT_LIST : STATEMENT_LIST FieldDeclarations",
"STATEMENT_LIST : IterationStatement",
"STATEMENT_LIST : STATEMENT_LIST IterationStatement",
"STATEMENT_LIST : EmptyStatement",
"STATEMENT_LIST : STATEMENT_LIST EmptyStatement",
"STATEMENT_LIST : Expression",
"STATEMENT_LIST : STATEMENT_LIST Expression",
"EmptyStatement : ';'",
"IterationStatement : WHILE '(' Expression ')' Block",
"SelectionStatement : IF '(' Expression ')' Block",
"SelectionStatement : IF '(' Expression ')' Block ELSE Block",
"FieldDeclarations : FieldDeclarationOptSemi",
"FieldDeclarationOptSemi : FieldDeclaration ';'",
"FieldDeclaration : FieldVariableDeclaration",
"FieldDeclaration : NonStaticInitializer",
"FieldVariableDeclaration : TypeSpecifier VariableDeclarators",
"VariableDeclarators : VariableDeclarator",
"VariableDeclarators : VariableDeclarators ',' VariableDeclarator",
"VariableDeclarator : DeclaratorName",
"VariableDeclarator : DeclaratorName '=' VariableInitializer",
"DeclaratorName : ID",
"DeclaratorName : DeclaratorName '[' INTEGER ']'",
"VariableInitializer : Expression",
"VariableInitializer : '{' ArrayInitializers '}'",
"ArrayInitializers : VariableInitializer",
"ArrayInitializers : ArrayInitializers ',' VariableInitializer",
"NonStaticInitializer : Block",
"Block : '{' STATEMENT_LIST '}'",
"Block : '{' '}'",
"TypeSpecifier : TypeName",
"TypeSpecifier : TypeName '[' INTEGER ']'",
"TypeName : PrimitiveType",
"PrimitiveType : DECLR_BOOL",
"PrimitiveType : DECLR_INT",
"PrimitiveType : DECLR_STR",
"QualifiedName : ID",
"QualifiedName : QualifiedName '.' ID",
"PrimaryExpression : QualifiedName",
"PrimaryExpression : ComplexPrimary",
"ComplexPrimary : '(' Expression ')'",
"ComplexPrimary : ComplexPrimaryNoParenthesis",
"ComplexPrimaryNoParenthesis : INTEGER",
"ComplexPrimaryNoParenthesis : STRING",
"ComplexPrimaryNoParenthesis : TRUE",
"ComplexPrimaryNoParenthesis : FALSE",
"ComplexPrimaryNoParenthesis : ArrayAccess",
"ComplexPrimaryNoParenthesis : FieldAccess",
"FieldAccess : ComplexPrimary '.' ID",
"ArrayAccess : QualifiedName '[' Expression ']'",
"ArrayAccess : ComplexPrimary '[' Expression ']'",
"UnaryExpression : LogicalUnaryExpression",
"LogicalUnaryExpression : PrimaryExpression",
"LogicalUnaryExpression : LogicalUnaryOperator UnaryExpression",
"LogicalUnaryOperator : '~'",
"LogicalUnaryOperator : '!'",
"MultiplicativeExpression : UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression '*' UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression '/' UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression '%' UnaryExpression",
"AdditiveExpression : MultiplicativeExpression",
"AdditiveExpression : AdditiveExpression '+' MultiplicativeExpression",
"AdditiveExpression : AdditiveExpression '-' MultiplicativeExpression",
"RelationalExpression : AdditiveExpression",
"RelationalExpression : RelationalExpression '<' AdditiveExpression",
"RelationalExpression : RelationalExpression '>' AdditiveExpression",
"RelationalExpression : RelationalExpression OP_LE AdditiveExpression",
"RelationalExpression : RelationalExpression OP_GE AdditiveExpression",
"EqualityExpression : RelationalExpression",
"EqualityExpression : EqualityExpression OP_EQ RelationalExpression",
"EqualityExpression : EqualityExpression OP_NE RelationalExpression",
"ConditionalAndExpression : EqualityExpression",
"ConditionalAndExpression : ConditionalAndExpression OP_LAND EqualityExpression",
"ConditionalOrExpression : ConditionalAndExpression",
"ConditionalOrExpression : ConditionalOrExpression OP_LOR ConditionalAndExpression",
"Expression : ConditionalOrExpression",
"Expression : UnaryExpression '=' Expression",
};

//#line 474 "GameWizard.y"

  private Yylex lexer;

  private int yylex () {
    int yyl_return = -1;
    try {
      yylval = new ParserVal(0);
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      System.err.println("IO error :"+e);
    }
    return yyl_return;
  }


  public void yyerror (String error) {
    System.err.println ("Error: " + error);
  }


  public Parser(Reader r) {
    lexer = new Yylex(r, this);
  }


  static boolean interactive;

   class foo{
       public foo()
       {
           System.out.println("HAHAHA");
       }
   }

  public static void main(String args[]) throws IOException {
    System.out.println("BYACC/Java with JFlex Calculator Demo");

    Parser yyparser;
    if ( args.length > 0 ) {
      // parse a file
      yyparser = new Parser(new FileReader(args[0]));
    }
    else {
      // interactive mode
      System.out.println("[Quit with CTRL-D]");
      System.out.print("Expression: ");
      interactive = true;
	    yyparser = new Parser(new InputStreamReader(System.in));
    }

    yyparser.yyparse();
    
    if (interactive) {
      System.out.println();
      System.out.println("Have a nice day");
    }
  }
//#line 831 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 116 "GameWizard.y"
{
		String methods = val_peek(2).sval+val_peek(1).sval+val_peek(0).sval;
		Util.writeGameJava(val_peek(5).sval,methods);
	}
break;
case 2:
//#line 121 "GameWizard.y"
{yyval.sval=val_peek(1).sval; System.out.println("game_df");}
break;
case 3:
//#line 125 "GameWizard.y"
{String s= "public static String name = "+val_peek(9).sval+";\npublic static int num_of_players = "+val_peek(5).ival+";\npublic static int maximum_round = "+val_peek(1).ival+";\n"; yyval.sval=s; System.out.println(s);}
break;
case 4:
//#line 127 "GameWizard.y"
{System.out.println("2");}
break;
case 5:
//#line 129 "GameWizard.y"
{System.out.println("1");}
break;
case 6:
//#line 130 "GameWizard.y"
{System.out.println("3");}
break;
case 7:
//#line 133 "GameWizard.y"
{System.out.println("5");Util.writeCardsJava(val_peek(11).sval.toString(),val_peek(9).obj,val_peek(2).sval); }
break;
case 8:
//#line 135 "GameWizard.y"
{System.out.println("5");Util.writeCardsJava(val_peek(11).sval.toString(),val_peek(9).obj,""); }
break;
case 9:
//#line 137 "GameWizard.y"
{System.out.println("character_df");}
break;
case 10:
//#line 139 "GameWizard.y"
{System.out.println("characters_df_content");}
break;
case 11:
//#line 140 "GameWizard.y"
{System.out.println("characters_df_content");}
break;
case 12:
//#line 145 "GameWizard.y"
{Util.writeCharacterJava(val_peek(4).sval,val_peek(2).obj,val_peek(1).obj); System.out.println("character_df_content");}
break;
case 13:
//#line 148 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>();
            result.add("Integer"); result.add(val_peek(4).sval);result.add(String.valueOf(val_peek(2).ival));
            ArrayList<String> x1 = (ArrayList<String>)(val_peek(0).obj);
            
            result.addAll(x1); yyval.obj=result;  System.out.println("variable_list");
                }
break;
case 14:
//#line 155 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>();
            result.add("String"); result.add(val_peek(4).sval);result.add(val_peek(2).sval);
            ArrayList<String> x1 = (ArrayList<String>)(val_peek(0).obj);
            result.addAll(x1); yyval.obj=result;   System.out.println("variable_list");
                }
break;
case 15:
//#line 160 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>(); yyval.obj= result;   System.out.println("variable_list");}
break;
case 16:
//#line 165 "GameWizard.y"
{yyval.obj = val_peek(1).obj;}
break;
case 17:
//#line 169 "GameWizard.y"
{ArrayList<String> ret = new ArrayList<String>(); yyval.obj=ret;}
break;
case 18:
//#line 172 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>();
                                    ArrayList<String> x1 = (ArrayList<String>)(val_peek(1).obj);
                                    ArrayList<String> x2 = (ArrayList<String>)(val_peek(0).obj);
                                    result.addAll(x1); result.addAll(x2); yyval.obj= result;}
break;
case 19:
//#line 176 "GameWizard.y"
{yyval.obj=val_peek(0).obj;}
break;
case 20:
//#line 182 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>();
            result.add(val_peek(10).sval);
            result.add(val_peek(2).sval);
            yyval.obj=result;
        }
break;
case 21:
//#line 189 "GameWizard.y"
{ArrayList<String> result= new ArrayList<String>();
            result.add(val_peek(10).sval);
            result.add("");
            yyval.obj=result;
        }
break;
case 22:
//#line 198 "GameWizard.y"
{
		String ret = "public static void init(){\n"+val_peek(1).sval+"\n}\n";
		yyval.sval=ret;
	}
break;
case 23:
//#line 204 "GameWizard.y"
{
		String ret = "public static void init(){}\n";
	}
break;
case 24:
//#line 211 "GameWizard.y"
{
		String ret = "public static void round_begin(){\n"+
			val_peek(3).sval+"\n}\n"+
			"public static void turn(Player player) throws IOException{"+
			val_peek(2).sval+"\n}\n"+
			"public static void round_end() throws Exception{"+
			val_peek(1).sval+"\n}\n";
		yyval.sval = ret;
	}
break;
case 25:
//#line 223 "GameWizard.y"
{yyval.sval=val_peek(1).sval;}
break;
case 26:
//#line 225 "GameWizard.y"
{yyval.sval="";}
break;
case 27:
//#line 229 "GameWizard.y"
{yyval.sval=val_peek(1).sval;}
break;
case 28:
//#line 231 "GameWizard.y"
{yyval.sval="";}
break;
case 29:
//#line 235 "GameWizard.y"
{yyval.sval=val_peek(1).sval;}
break;
case 30:
//#line 237 "GameWizard.y"
{yyval.sval="";}
break;
case 31:
//#line 242 "GameWizard.y"
{
		String ret = "public static void dying(){\n"+val_peek(1).sval+"\n}\n";
		yyval.sval=ret;
	}
break;
case 32:
//#line 248 "GameWizard.y"
{
		String ret = "public static void dying(){}\n";
		yyval.sval=ret;
	}
break;
case 33:
//#line 256 "GameWizard.y"
{System.out.println("selection");yyval.sval=val_peek(0).sval;}
break;
case 34:
//#line 257 "GameWizard.y"
{System.out.println("selection");yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 35:
//#line 258 "GameWizard.y"
{System.out.println("declare");yyval.sval=val_peek(0).sval;}
break;
case 36:
//#line 259 "GameWizard.y"
{System.out.println("declare");yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 37:
//#line 260 "GameWizard.y"
{System.out.println("iteration");yyval.sval=val_peek(0).sval;}
break;
case 38:
//#line 261 "GameWizard.y"
{System.out.println("iteration");yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 39:
//#line 262 "GameWizard.y"
{System.out.println("empty");yyval.sval=val_peek(0).sval;}
break;
case 40:
//#line 263 "GameWizard.y"
{System.out.println("empty");yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 41:
//#line 264 "GameWizard.y"
{System.out.println("expression");yyval.sval=val_peek(0).sval;}
break;
case 42:
//#line 265 "GameWizard.y"
{System.out.println("expression");yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 43:
//#line 269 "GameWizard.y"
{yyval.sval=";";}
break;
case 44:
//#line 274 "GameWizard.y"
{System.out.println("8");String s = "while("+val_peek(2).sval+")\n"+val_peek(0).sval; yyval.sval=s;}
break;
case 45:
//#line 280 "GameWizard.y"
{System.out.println("6");String s = "if("+val_peek(2).sval+")\n"+val_peek(0).sval; yyval.sval=s;}
break;
case 46:
//#line 282 "GameWizard.y"
{System.out.println("7");String s = "if("+val_peek(4).sval+")\n"+val_peek(2).sval+";\nelse\n"+val_peek(0).sval+";"; yyval.sval=s;}
break;
case 47:
//#line 287 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 48:
//#line 291 "GameWizard.y"
{System.out.println("3");yyval.sval=val_peek(1).sval+";\n";}
break;
case 49:
//#line 296 "GameWizard.y"
{System.out.println(val_peek(0).sval);yyval.sval=val_peek(0).sval;}
break;
case 50:
//#line 297 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 51:
//#line 301 "GameWizard.y"
{yyval.sval=val_peek(1).sval+val_peek(0).sval;System.out.println(yyval.sval);}
break;
case 52:
//#line 305 "GameWizard.y"
{System.out.println("1");yyval.sval=val_peek(0).sval;}
break;
case 53:
//#line 306 "GameWizard.y"
{yyval.sval=val_peek(2).sval+','+val_peek(0).sval;}
break;
case 54:
//#line 310 "GameWizard.y"
{System.out.println("1");yyval.sval=val_peek(0).sval;}
break;
case 55:
//#line 311 "GameWizard.y"
{yyval.sval=val_peek(2).sval+'='+val_peek(0).sval;}
break;
case 56:
//#line 315 "GameWizard.y"
{System.out.println("1");yyval.sval=val_peek(0).sval;}
break;
case 57:
//#line 316 "GameWizard.y"
{yyval.sval=val_peek(3).sval+'['+val_peek(1).ival+']';}
break;
case 58:
//#line 320 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 59:
//#line 321 "GameWizard.y"
{yyval.sval='{'+val_peek(1).sval+'}';}
break;
case 60:
//#line 325 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 61:
//#line 326 "GameWizard.y"
{yyval.sval=val_peek(2).sval+','+val_peek(0).sval;}
break;
case 62:
//#line 330 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 63:
//#line 334 "GameWizard.y"
{yyval.sval="{"+val_peek(1).sval+"}";}
break;
case 64:
//#line 335 "GameWizard.y"
{yyval.sval="{}";}
break;
case 65:
//#line 348 "GameWizard.y"
{System.out.println("0");yyval.sval=val_peek(0).sval;}
break;
case 66:
//#line 349 "GameWizard.y"
{yyval.sval=val_peek(3).sval+'['+val_peek(1).ival+']';}
break;
case 67:
//#line 354 "GameWizard.y"
{System.out.println("0");yyval.sval=val_peek(0).sval;}
break;
case 68:
//#line 360 "GameWizard.y"
{yyval.sval="boolean ";}
break;
case 69:
//#line 361 "GameWizard.y"
{yyval.sval="int ";}
break;
case 70:
//#line 362 "GameWizard.y"
{yyval.sval="String ";}
break;
case 71:
//#line 372 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 72:
//#line 373 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"."+val_peek(0).sval;}
break;
case 73:
//#line 377 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 74:
//#line 378 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 75:
//#line 383 "GameWizard.y"
{yyval.sval="("+val_peek(1).sval+")";}
break;
case 76:
//#line 384 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 77:
//#line 389 "GameWizard.y"
{Integer tmp = new Integer(val_peek(0).ival);yyval.sval=tmp.toString();}
break;
case 78:
//#line 390 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 79:
//#line 391 "GameWizard.y"
{yyval.sval="true";}
break;
case 80:
//#line 392 "GameWizard.y"
{yyval.sval="false";}
break;
case 81:
//#line 393 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 82:
//#line 394 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 83:
//#line 398 "GameWizard.y"
{yyval.sval=val_peek(2).sval+'.'+val_peek(0).sval;}
break;
case 84:
//#line 402 "GameWizard.y"
{yyval.sval=val_peek(3).sval+'['+val_peek(1).sval+']';}
break;
case 85:
//#line 403 "GameWizard.y"
{yyval.sval=val_peek(3).sval+'['+val_peek(1).sval+']';}
break;
case 86:
//#line 409 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 87:
//#line 413 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 88:
//#line 414 "GameWizard.y"
{yyval.sval=val_peek(1).sval+val_peek(0).sval;}
break;
case 89:
//#line 418 "GameWizard.y"
{yyval.sval="~";}
break;
case 90:
//#line 419 "GameWizard.y"
{yyval.sval="!";}
break;
case 91:
//#line 424 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 92:
//#line 425 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"*"+val_peek(0).sval;}
break;
case 93:
//#line 426 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"/"+val_peek(0).sval;}
break;
case 94:
//#line 427 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"%"+val_peek(0).sval;}
break;
case 95:
//#line 432 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 96:
//#line 433 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"+"+val_peek(0).sval;}
break;
case 97:
//#line 434 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"-"+val_peek(0).sval;}
break;
case 98:
//#line 439 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 99:
//#line 440 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"<"+val_peek(0).sval;}
break;
case 100:
//#line 441 "GameWizard.y"
{yyval.sval=val_peek(2).sval+">"+val_peek(0).sval;}
break;
case 101:
//#line 442 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"<="+val_peek(0).sval;}
break;
case 102:
//#line 443 "GameWizard.y"
{yyval.sval=val_peek(2).sval+">="+val_peek(0).sval;}
break;
case 103:
//#line 448 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 104:
//#line 449 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"=="+val_peek(0).sval;}
break;
case 105:
//#line 450 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"!="+val_peek(0).sval;}
break;
case 106:
//#line 454 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 107:
//#line 455 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"&&"+val_peek(0).sval;}
break;
case 108:
//#line 460 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 109:
//#line 461 "GameWizard.y"
{yyval.sval=val_peek(2).sval+"||"+val_peek(0).sval;}
break;
case 110:
//#line 465 "GameWizard.y"
{yyval.sval=val_peek(0).sval;}
break;
case 111:
//#line 466 "GameWizard.y"
{yyval.sval= val_peek(2).sval+"="+val_peek(0).sval;}
break;
//#line 1466 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
