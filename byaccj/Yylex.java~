/* The following code was generated by JFlex 1.5.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2000 Gerwin Klein <lsf@jflex.de>                          *
 * All rights reserved.                                                    *
 *                                                                         *
 * Thanks to Larry Bell and Bob Jamison for suggestions and comments.      *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>GameWizard.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\47\1\34\1\34\25\0\1\6\1\41\1\30\2\0\1\35"+
    "\1\43\1\0\1\35\1\35\1\35\1\35\1\35\1\35\1\35\1\35"+
    "\12\27\1\35\1\35\1\40\1\36\1\37\2\0\17\33\1\25\2\33"+
    "\1\45\7\33\1\35\1\0\1\35\1\35\1\12\1\0\1\10\1\46"+
    "\1\13\1\1\1\2\1\3\1\7\1\16\1\4\1\33\1\31\1\23"+
    "\1\11\1\5\1\21\1\22\1\33\1\14\1\15\1\17\1\20\1\32"+
    "\1\44\1\26\1\24\1\33\1\35\1\42\1\35\1\35\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\2\1\3\6\2\1\4\1\1\1\2"+
    "\5\5\2\1\3\2\1\6\3\2\1\7\10\2\1\0"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\7\2\1\17\15\2\1\20\6\2\1\21\1\2\1\22"+
    "\2\2\1\23\2\2\1\24\4\2\1\25\1\2\1\26"+
    "\2\2\1\27\2\2\1\30\1\2\1\31\1\32\1\0"+
    "\3\2\2\0\3\2\3\0\1\2\1\33\1\2\3\0"+
    "\2\2\1\34\2\0\2\2\1\35\1\0\2\2\1\0"+
    "\1\2\1\36\1\0\1\37\2\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\50\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\50\0\u0410\0\u0438\0\u0460\0\u0168"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u0258\0\50\0\u05c8\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0168\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8"+
    "\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0168\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0168\0\u0a00\0\u0168"+
    "\0\u0a28\0\u0a50\0\u0168\0\u0a78\0\u0aa0\0\u0168\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0168\0\u0b68\0\u0168\0\u0b90\0\u0bb8\0\u0168"+
    "\0\u0be0\0\u0c08\0\u0168\0\u0c30\0\u0168\0\u0168\0\u0c58\0\u0c80"+
    "\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0"+
    "\0\u0de8\0\u0e10\0\u0e38\0\u0168\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8"+
    "\0\u0f00\0\u0f28\0\50\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\50"+
    "\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u0168\0\u10b8\0\u0168"+
    "\0\u10e0\0\u1108\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\2\12\1\14\1\12\1\15\5\12"+
    "\1\16\1\12\1\17\1\20\1\12\1\21\1\12\1\10"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\51\0\1\12\1\35\3\12\1\0"+
    "\21\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\14\12\1\36\4\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\1\12\1\37\17\12\1\0\3\12\10\0"+
    "\3\12\2\0\2\12\1\40\1\12\1\41\1\0\21\12"+
    "\1\0\3\12\10\0\3\12\2\0\5\12\1\0\11\12"+
    "\1\42\7\12\1\0\3\12\10\0\3\12\7\0\1\10"+
    "\25\0\1\10\14\0\5\12\1\0\1\12\1\43\17\12"+
    "\1\0\3\12\10\0\3\12\2\0\5\12\1\0\21\12"+
    "\1\0\3\12\10\0\3\12\2\0\1\12\1\44\3\12"+
    "\1\0\1\12\1\45\17\12\1\0\3\12\10\0\3\12"+
    "\2\0\5\12\1\0\21\12\1\0\1\46\2\12\10\0"+
    "\3\12\2\0\5\12\1\0\5\12\1\47\13\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\14\12\1\50"+
    "\4\12\1\0\3\12\10\0\3\12\30\0\1\17\20\0"+
    "\30\51\1\52\17\51\1\0\5\12\1\0\12\12\1\53"+
    "\6\12\1\0\3\12\10\0\3\12\37\0\1\54\47\0"+
    "\1\55\47\0\1\56\47\0\1\57\53\0\1\60\50\0"+
    "\1\61\5\0\5\12\1\0\7\12\1\62\11\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\10\12\1\63"+
    "\10\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\12\12\1\64\6\12\1\0\3\12\10\0\3\12\2\0"+
    "\2\12\1\65\2\12\1\0\1\12\1\66\17\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\6\12\1\67"+
    "\12\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\14\12\1\70\4\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\10\12\1\71\10\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\2\12\1\72\16\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\2\12\1\73"+
    "\16\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\10\12\1\74\10\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\17\12\1\75\1\12\1\0\3\12\10\0"+
    "\3\12\2\0\3\12\1\76\1\12\1\0\21\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\11\12\1\77"+
    "\7\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\1\12\1\100\17\12\1\0\3\12\10\0\3\12\2\0"+
    "\3\12\1\101\1\12\1\0\21\12\1\0\3\12\10\0"+
    "\3\12\2\0\3\12\1\102\1\12\1\0\21\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\5\12\1\103"+
    "\13\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\12\12\1\104\6\12\1\0\3\12\10\0\3\12\2\0"+
    "\3\12\1\105\1\12\1\0\21\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\14\12\1\106\4\12\1\0"+
    "\3\12\10\0\3\12\2\0\1\12\1\107\3\12\1\0"+
    "\21\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\6\12\1\110\12\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\3\12\1\111\15\12\1\0\3\12\10\0"+
    "\3\12\2\0\1\12\1\112\3\12\1\0\21\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\7\12\1\113"+
    "\11\12\1\0\3\12\10\0\3\12\2\0\3\12\1\114"+
    "\1\12\1\0\21\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\14\12\1\115\4\12\1\0\3\12\10\0"+
    "\3\12\2\0\1\12\1\116\3\12\1\0\21\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\15\12\1\117"+
    "\3\12\1\0\3\12\10\0\3\12\2\0\1\120\4\12"+
    "\1\0\21\12\1\0\3\12\10\0\3\12\2\0\5\12"+
    "\1\0\14\12\1\121\4\12\1\0\3\12\10\0\3\12"+
    "\2\0\3\12\1\122\1\12\1\0\21\12\1\0\3\12"+
    "\10\0\3\12\2\0\5\12\1\0\14\12\1\123\4\12"+
    "\1\0\3\12\10\0\3\12\2\0\4\12\1\124\1\0"+
    "\21\12\1\0\3\12\10\0\3\12\2\0\1\12\1\125"+
    "\3\12\1\0\21\12\1\0\3\12\10\0\3\12\2\0"+
    "\1\12\1\126\3\12\1\0\21\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\12\12\1\127\6\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\3\12\1\130"+
    "\15\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\12\12\1\131\6\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\2\12\1\132\16\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\14\12\1\133\4\12\1\0"+
    "\3\12\10\0\3\12\2\0\1\12\1\134\3\12\1\0"+
    "\21\12\1\0\3\12\10\0\3\12\2\0\1\12\1\135"+
    "\3\12\1\0\21\12\1\0\3\12\10\0\3\12\2\0"+
    "\4\12\1\136\1\0\21\12\1\0\3\12\10\0\3\12"+
    "\2\0\1\12\1\137\3\12\1\0\21\12\1\0\3\12"+
    "\10\0\3\12\2\0\5\12\1\0\5\12\1\140\13\12"+
    "\1\0\3\12\10\0\3\12\2\0\2\12\1\141\2\12"+
    "\1\0\21\12\1\0\3\12\10\0\3\12\2\0\4\12"+
    "\1\142\1\0\21\12\1\0\3\12\10\0\3\12\2\0"+
    "\1\143\4\12\1\0\21\12\1\0\3\12\10\0\3\12"+
    "\2\0\5\12\1\0\11\12\1\144\7\12\1\0\3\12"+
    "\10\0\3\12\2\0\5\12\1\0\5\12\1\145\13\12"+
    "\1\0\3\12\10\0\3\12\2\0\5\12\1\0\1\146"+
    "\20\12\1\0\3\12\10\0\3\12\2\0\5\12\1\147"+
    "\21\12\1\0\3\12\10\0\3\12\2\0\5\12\1\0"+
    "\3\12\1\150\15\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\1\12\1\151\17\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\2\12\1\152\16\12\1\0"+
    "\3\12\10\0\3\12\10\0\1\153\3\0\1\154\35\0"+
    "\5\12\1\0\13\12\1\155\5\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\2\12\1\156\16\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\3\12\1\157"+
    "\15\12\1\0\3\12\10\0\3\12\11\0\1\160\47\0"+
    "\1\161\5\0\1\162\32\0\5\12\1\0\14\12\1\163"+
    "\4\12\1\0\3\12\10\0\3\12\2\0\1\12\1\164"+
    "\3\12\1\0\21\12\1\0\3\12\10\0\3\12\2\0"+
    "\5\12\1\0\5\12\1\165\13\12\1\0\3\12\10\0"+
    "\3\12\12\0\1\166\52\0\1\167\43\0\1\170\40\0"+
    "\5\12\1\0\1\12\1\171\17\12\1\0\3\12\10\0"+
    "\3\12\2\0\5\12\1\0\12\12\1\172\6\12\1\0"+
    "\3\12\10\0\3\12\3\0\1\173\46\0\1\174\62\0"+
    "\1\175\34\0\5\12\1\0\15\12\1\176\3\12\1\0"+
    "\3\12\10\0\3\12\2\0\5\12\1\0\11\12\1\177"+
    "\7\12\1\0\3\12\10\0\3\12\16\0\1\200\42\0"+
    "\1\201\40\0\1\12\1\202\3\12\1\0\21\12\1\0"+
    "\3\12\10\0\3\12\2\0\4\12\1\203\1\0\21\12"+
    "\1\0\3\12\10\0\3\12\14\0\1\204\35\0\5\12"+
    "\1\0\5\12\1\205\13\12\1\0\3\12\10\0\3\12"+
    "\2\0\1\206\4\12\1\0\21\12\1\0\3\12\10\0"+
    "\3\12\20\0\1\207\31\0\5\12\1\0\6\12\1\210"+
    "\12\12\1\0\3\12\10\0\3\12\3\0\1\211\61\0"+
    "\1\212\50\0\1\213\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\11\1\1\11\14\1\1\0"+
    "\1\11\1\1\6\11\65\1\1\0\3\1\2\0\3\1"+
    "\3\0\3\1\3\0\2\1\1\11\2\0\2\1\1\11"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;

  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.err.println("Error: unexpected character '"+yytext()+"'"); return -1;
          }
        case 33: break;
        case 2: 
          { yyparser.yylval = new ParserVal(yytext()); return Parser.ID;
          }
        case 34: break;
        case 3: 
          { /*do nothing*/
          }
        case 35: break;
        case 4: 
          { yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
		return Parser.INTEGER;
          }
        case 36: break;
        case 5: 
          { return (int) yycharat(0);
          }
        case 37: break;
        case 6: 
          { System.err.println("Sorry, backspace doesn't work");
          }
        case 38: break;
        case 7: 
          { return Parser.IF;
          }
        case 39: break;
        case 8: 
          { yyparser.yylval = new ParserVal(yytext()); return Parser.STRING;
          }
        case 40: break;
        case 9: 
          { return Parser.OP_EQ;
          }
        case 41: break;
        case 10: 
          { return Parser.OP_GE;
          }
        case 42: break;
        case 11: 
          { return Parser.OP_LE;
          }
        case 43: break;
        case 12: 
          { return Parser.OP_NE;
          }
        case 44: break;
        case 13: 
          { return Parser.OP_LOR;
          }
        case 45: break;
        case 14: 
          { return Parser.OP_LAND;
          }
        case 46: break;
        case 15: 
          { return Parser.DECLR_INT;
          }
        case 47: break;
        case 16: 
          { return Parser.ELSE;
          }
        case 48: break;
        case 17: 
          { return Parser.TRUE;
          }
        case 49: break;
        case 18: 
          { return Parser.VOID;
          }
        case 50: break;
        case 19: 
          { return Parser.DECLR_BOOL;
          }
        case 51: break;
        case 20: 
          { return Parser.FALSE;
          }
        case 52: break;
        case 21: 
          { return Parser.SKILL;
          }
        case 53: break;
        case 22: 
          { return Parser.WHILE;
          }
        case 54: break;
        case 23: 
          { return Parser.DEALER;
          }
        case 55: break;
        case 24: 
          { return Parser.METHOD;
          }
        case 56: break;
        case 25: 
          { return Parser.PLAYER;
          }
        case 57: break;
        case 26: 
          { return Parser.DECLR_STR;
          }
        case 58: break;
        case 27: 
          { return Parser.GAME_NM;
          }
        case 59: break;
        case 28: 
          { return Parser.GAME_DF;
          }
        case 60: break;
        case 29: 
          { return Parser.CARD_DF;
          }
        case 61: break;
        case 30: 
          { return Parser.MAX_ROUND;
          }
        case 62: break;
        case 31: 
          { return Parser.PLAYER_C;
          }
        case 63: break;
        case 32: 
          { return Parser.CHARACTER_DF;
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
